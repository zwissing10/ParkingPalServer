#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ParkingPalServ.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database1")]
	public partial class DataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertdata(data instance);
    partial void Updatedata(data instance);
    partial void Deletedata(data instance);
    #endregion
		
		public DataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Database1ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<data> datas
		{
			get
			{
				return this.GetTable<data>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.data")]
	public partial class data : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DataID;
		
		private string _Total;
		
		private string _Open;
		
		private string _OpenH;
		
		private string _Occupied;
		
		private string _OccupiedH;
		
		private System.Nullable<System.DateTime> _RecordedDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataIDChanging(int value);
    partial void OnDataIDChanged();
    partial void OnTotalChanging(string value);
    partial void OnTotalChanged();
    partial void OnOpenChanging(string value);
    partial void OnOpenChanged();
    partial void OnOpenHChanging(string value);
    partial void OnOpenHChanged();
    partial void OnOccupiedChanging(string value);
    partial void OnOccupiedChanged();
    partial void OnOccupiedHChanging(string value);
    partial void OnOccupiedHChanged();
    partial void OnRecordedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRecordedDateChanged();
    #endregion
		
		public data()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DataID
		{
			get
			{
				return this._DataID;
			}
			set
			{
				if ((this._DataID != value))
				{
					this.OnDataIDChanging(value);
					this.SendPropertyChanging();
					this._DataID = value;
					this.SendPropertyChanged("DataID");
					this.OnDataIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="NChar(10)")]
		public string Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Open]", Storage="_Open", DbType="NChar(10)")]
		public string Open
		{
			get
			{
				return this._Open;
			}
			set
			{
				if ((this._Open != value))
				{
					this.OnOpenChanging(value);
					this.SendPropertyChanging();
					this._Open = value;
					this.SendPropertyChanged("Open");
					this.OnOpenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenH", DbType="NChar(10)")]
		public string OpenH
		{
			get
			{
				return this._OpenH;
			}
			set
			{
				if ((this._OpenH != value))
				{
					this.OnOpenHChanging(value);
					this.SendPropertyChanging();
					this._OpenH = value;
					this.SendPropertyChanged("OpenH");
					this.OnOpenHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Occupied", DbType="NChar(10)")]
		public string Occupied
		{
			get
			{
				return this._Occupied;
			}
			set
			{
				if ((this._Occupied != value))
				{
					this.OnOccupiedChanging(value);
					this.SendPropertyChanging();
					this._Occupied = value;
					this.SendPropertyChanged("Occupied");
					this.OnOccupiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OccupiedH", DbType="NChar(10)")]
		public string OccupiedH
		{
			get
			{
				return this._OccupiedH;
			}
			set
			{
				if ((this._OccupiedH != value))
				{
					this.OnOccupiedHChanging(value);
					this.SendPropertyChanging();
					this._OccupiedH = value;
					this.SendPropertyChanged("OccupiedH");
					this.OnOccupiedHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RecordedDate
		{
			get
			{
				return this._RecordedDate;
			}
			set
			{
				if ((this._RecordedDate != value))
				{
					this.OnRecordedDateChanging(value);
					this.SendPropertyChanging();
					this._RecordedDate = value;
					this.SendPropertyChanged("RecordedDate");
					this.OnRecordedDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
